# Rate limiting and DDoS protection for marketplace

# Define rate limit zones
limit_req_zone $binary_remote_addr zone=general_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=30r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=blockchain_limit:10m rate=5r/s;
limit_req_zone $binary_remote_addr zone=search_limit:10m rate=20r/s;
limit_req_zone $binary_remote_addr zone=upload_limit:10m rate=2r/m;

# Connection limits
limit_conn_zone $binary_remote_addr zone=addr_conn:10m;
limit_conn_zone $server_name zone=server_conn:10m;

# Request body size limits
client_body_buffer_size 1K;
client_header_buffer_size 1k;
client_max_body_size 10M;  # Adjust for file uploads
large_client_header_buffers 2 1k;

# Timeouts
client_body_timeout 10;
client_header_timeout 10;
keepalive_timeout 5 5;
send_timeout 10;

# Security headers
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "strict-origin-when-cross-origin" always;
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:;" always;

# Main server block
server {
    listen 443 ssl http2;
    server_name marketplace.platformq.io;

    # SSL configuration
    ssl_certificate /etc/nginx/ssl/marketplace.crt;
    ssl_certificate_key /etc/nginx/ssl/marketplace.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Connection limits
    limit_conn addr_conn 10;
    limit_conn server_conn 1000;

    # General API endpoints
    location /api/ {
        limit_req zone=api_limit burst=50 nodelay;
        limit_req_status 429;
        
        # CORS headers
        add_header 'Access-Control-Allow-Origin' '$http_origin' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        proxy_pass http://api_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Authentication endpoints - stricter limits
    location /api/v1/auth/ {
        limit_req zone=auth_limit burst=2 nodelay;
        limit_req_status 429;
        
        # Additional security for auth endpoints
        if ($http_user_agent ~* (bot|crawler|spider)) {
            return 403;
        }
        
        proxy_pass http://auth_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Blockchain operations - prevent spam
    location ~ ^/api/v1/marketplace/(mint-nft|purchase-license|distribute-royalty) {
        limit_req zone=blockchain_limit burst=10 nodelay;
        limit_req_status 429;
        
        # Require authentication
        auth_request /auth/verify;
        auth_request_set $auth_status $upstream_status;
        
        # Additional validation
        if ($request_method !~ ^(POST)$) {
            return 405;
        }
        
        proxy_pass http://blockchain_bridge;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Auth-Status $auth_status;
    }

    # Search endpoints
    location /api/v1/search {
        limit_req zone=search_limit burst=30 nodelay;
        limit_req_status 429;
        
        # Cache search results
        proxy_cache search_cache;
        proxy_cache_valid 200 1m;
        proxy_cache_key "$scheme$request_method$host$request_uri$arg_q$arg_type";
        
        proxy_pass http://search_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    # File upload endpoints
    location /api/v1/upload {
        limit_req zone=upload_limit burst=5 nodelay;
        limit_req_status 429;
        
        # File upload specific settings
        client_max_body_size 100M;
        client_body_timeout 300;
        
        # Validate file types
        if ($http_content_type !~* ^(image|video|audio|application/pdf)) {
            return 415;
        }
        
        proxy_pass http://storage_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_request_buffering off;
    }

    # WebSocket connections for real-time features
    location /ws/ {
        limit_req zone=general_limit burst=5 nodelay;
        limit_conn addr_conn 5;
        
        proxy_pass http://websocket_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_read_timeout 3600;
    }

    # Static assets
    location /static/ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        root /var/www/marketplace;
    }

    # Health check endpoint - no rate limiting
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Block common attack patterns
    location ~ /\. {
        deny all;
    }
    
    location ~ /\.git {
        deny all;
    }
    
    location ~ /\.env {
        deny all;
    }
    
    # Block SQL injection attempts
    if ($args ~* "(union|select|insert|drop|delete|update|cast|create|char|convert|alter|declare|script|set|md5|benchmark)") {
        return 403;
    }
    
    # Block common scanners
    if ($http_user_agent ~* (nmap|nikto|wikto|sf|sqlmap|bsqlbf|w3af|acunetix|havij|appscan)) {
        return 403;
    }
}

# Upstream definitions
upstream api_backend {
    least_conn;
    server marketplace-api-1:8000 max_fails=3 fail_timeout=30s;
    server marketplace-api-2:8000 max_fails=3 fail_timeout=30s;
    server marketplace-api-3:8000 max_fails=3 fail_timeout=30s;
}

upstream auth_service {
    server auth-service:8001 max_fails=2 fail_timeout=10s;
}

upstream blockchain_bridge {
    server blockchain-event-bridge:8002 max_fails=2 fail_timeout=30s;
}

upstream search_service {
    least_conn;
    server search-service-1:8005;
    server search-service-2:8005;
}

upstream storage_service {
    server storage-proxy:8006;
}

upstream websocket_backend {
    ip_hash;
    server realtime-analytics-1:8008;
    server realtime-analytics-2:8008;
}

# Cache configuration
proxy_cache_path /var/cache/nginx/search levels=1:2 keys_zone=search_cache:10m max_size=100m inactive=60m use_temp_path=off;

# Custom error pages
error_page 429 /429.html;
location = /429.html {
    root /var/www/errors;
    internal;
}

error_page 403 /403.html;
location = /403.html {
    root /var/www/errors;
    internal;
}

# Logging
access_log /var/log/nginx/marketplace_access.log combined buffer=32k flush=5s;
error_log /var/log/nginx/marketplace_error.log warn;

# Log rate limit violations
log_format rate_limit '$remote_addr - $remote_user [$time_local] '
                     '"$request" $status $body_bytes_sent '
                     '"$http_referer" "$http_user_agent" '
                     '$limit_req_status';

access_log /var/log/nginx/rate_limit.log rate_limit if=$limit_req_status; 