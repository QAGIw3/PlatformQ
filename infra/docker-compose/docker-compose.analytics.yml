version: '3.8'

services:
  # =================
  # Apache Zookeeper (Required by Druid)
  # =================
  zookeeper:
    image: zookeeper:3.8
    container_name: analytics-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zookeeper:2888:3888;2181
    volumes:
      - zookeeper-data:/data
      - zookeeper-logs:/datalog
    networks:
      - analytics-network

  # =================
  # PostgreSQL (Metadata storage for Druid and Trino)
  # =================
  postgres:
    image: postgres:15-alpine
    container_name: analytics-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-analytics123}
      POSTGRES_USER: analytics
      POSTGRES_DB: analytics_metadata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    networks:
      - analytics-network

  # =================
  # Apache Druid
  # =================
  druid-coordinator:
    image: apache/druid:27.0.0
    container_name: druid-coordinator
    ports:
      - "8081:8081"
    command: coordinator
    env_file:
      - ./config/druid.env
    environment:
      - DRUID_LOG4J=<?xml version="1.0" encoding="UTF-8" ?><Configuration status="WARN"><Appenders><Console name="Console" target="SYSTEM_OUT"><PatternLayout pattern="%d{ISO8601} %p [%t] %c - %m%n"/></Console></Appenders><Loggers><Root level="info"><AppenderRef ref="Console"/></Root></Loggers></Configuration>
    volumes:
      - druid-data:/opt/data
      - ./config/druid:/opt/druid/conf/druid/cluster/_common
    depends_on:
      - zookeeper
      - postgres
    networks:
      - analytics-network

  druid-broker:
    image: apache/druid:27.0.0
    container_name: druid-broker
    ports:
      - "8082:8082"
    command: broker
    env_file:
      - ./config/druid.env
    environment:
      - DRUID_LOG4J=<?xml version="1.0" encoding="UTF-8" ?><Configuration status="WARN"><Appenders><Console name="Console" target="SYSTEM_OUT"><PatternLayout pattern="%d{ISO8601} %p [%t] %c - %m%n"/></Console></Appenders><Loggers><Root level="info"><AppenderRef ref="Console"/></Root></Loggers></Configuration>
    volumes:
      - ./config/druid:/opt/druid/conf/druid/cluster/_common
    depends_on:
      - zookeeper
      - postgres
      - druid-coordinator
    networks:
      - analytics-network

  druid-historical:
    image: apache/druid:27.0.0
    container_name: druid-historical
    ports:
      - "8083:8083"
    command: historical
    env_file:
      - ./config/druid.env
    environment:
      - DRUID_LOG4J=<?xml version="1.0" encoding="UTF-8" ?><Configuration status="WARN"><Appenders><Console name="Console" target="SYSTEM_OUT"><PatternLayout pattern="%d{ISO8601} %p [%t] %c - %m%n"/></Console></Appenders><Loggers><Root level="info"><AppenderRef ref="Console"/></Root></Loggers></Configuration>
    volumes:
      - druid-segments:/opt/druid/var/segments
      - ./config/druid:/opt/druid/conf/druid/cluster/_common
    depends_on:
      - zookeeper
      - postgres
      - druid-coordinator
    networks:
      - analytics-network

  druid-middlemanager:
    image: apache/druid:27.0.0
    container_name: druid-middlemanager
    ports:
      - "8091:8091"
      - "8100-8199:8100-8199"
    command: middleManager
    env_file:
      - ./config/druid.env
    environment:
      - DRUID_LOG4J=<?xml version="1.0" encoding="UTF-8" ?><Configuration status="WARN"><Appenders><Console name="Console" target="SYSTEM_OUT"><PatternLayout pattern="%d{ISO8601} %p [%t] %c - %m%n"/></Console></Appenders><Loggers><Root level="info"><AppenderRef ref="Console"/></Root></Loggers></Configuration>
    volumes:
      - druid-data:/opt/data
      - ./config/druid:/opt/druid/conf/druid/cluster/_common
    depends_on:
      - zookeeper
      - postgres
      - druid-coordinator
    networks:
      - analytics-network

  druid-router:
    image: apache/druid:27.0.0
    container_name: druid-router
    ports:
      - "8888:8888"
    command: router
    env_file:
      - ./config/druid.env
    environment:
      - DRUID_LOG4J=<?xml version="1.0" encoding="UTF-8" ?><Configuration status="WARN"><Appenders><Console name="Console" target="SYSTEM_OUT"><PatternLayout pattern="%d{ISO8601} %p [%t] %c - %m%n"/></Console></Appenders><Loggers><Root level="info"><AppenderRef ref="Console"/></Root></Loggers></Configuration>
    volumes:
      - ./config/druid:/opt/druid/conf/druid/cluster/_common
    depends_on:
      - druid-coordinator
      - druid-broker
    networks:
      - analytics-network

  # =================
  # Apache Ignite
  # =================
  ignite-1:
    image: apacheignite/ignite:2.15.0
    container_name: ignite-1
    ports:
      - "10800:10800"
      - "11211:11211"
      - "47100:47100"
      - "47500:47500"
      - "49112:49112"
    environment:
      - IGNITE_QUIET=false
      - JVM_OPTS=-Xms1g -Xmx4g -server -XX:+UseG1GC
    volumes:
      - ignite-data-1:/persistence
      - ./config/ignite:/opt/ignite/config
    command: /opt/ignite/apache-ignite/bin/ignite.sh /opt/ignite/config/analytics-cache-config.xml
    networks:
      - analytics-network

  ignite-2:
    image: apacheignite/ignite:2.15.0
    container_name: ignite-2
    ports:
      - "10801:10800"
      - "11212:11211"
      - "47101:47100"
      - "47501:47500"
      - "49113:49112"
    environment:
      - IGNITE_QUIET=false
      - JVM_OPTS=-Xms1g -Xmx4g -server -XX:+UseG1GC
    volumes:
      - ignite-data-2:/persistence
      - ./config/ignite:/opt/ignite/config
    command: /opt/ignite/apache-ignite/bin/ignite.sh /opt/ignite/config/analytics-cache-config.xml
    networks:
      - analytics-network

  # =================
  # Apache Trino
  # =================
  trino-coordinator:
    image: trinodb/trino:426
    container_name: trino-coordinator
    ports:
      - "8080:8080"
    volumes:
      - ./config/trino/coordinator:/etc/trino
      - ./config/trino/catalog:/etc/trino/catalog
    networks:
      - analytics-network

  trino-worker-1:
    image: trinodb/trino:426
    container_name: trino-worker-1
    ports:
      - "8081:8081"
    volumes:
      - ./config/trino/worker:/etc/trino
      - ./config/trino/catalog:/etc/trino/catalog
    networks:
      - analytics-network

  trino-worker-2:
    image: trinodb/trino:426
    container_name: trino-worker-2
    ports:
      - "8082:8081"
    volumes:
      - ./config/trino/worker:/etc/trino
      - ./config/trino/catalog:/etc/trino/catalog
    networks:
      - analytics-network

  # =================
  # MinIO (S3-compatible storage)
  # =================
  minio:
    image: minio/minio:latest
    container_name: analytics-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - analytics-network

  # Create MinIO buckets
  minio-init:
    image: minio/mc:latest
    container_name: minio-init
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb myminio/datalake || true;
      mc mb myminio/mlflow || true;
      mc mb myminio/models || true;
      mc mb myminio/features || true;
      mc mb myminio/druid-deep-storage || true;
      exit 0;
      "
    networks:
      - analytics-network

  # =================
  # MLflow
  # =================
  mlflow-db:
    image: postgres:15-alpine
    container_name: mlflow-postgres
    environment:
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: ${MLFLOW_DB_PASSWORD:-mlflow123}
      POSTGRES_DB: mlflow
    volumes:
      - mlflow-db-data:/var/lib/postgresql/data
    networks:
      - analytics-network

  mlflow-server:
    build:
      context: ../../services/mlflow-server
      dockerfile: Dockerfile
    container_name: mlflow-server
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MLFLOW_BACKEND_STORE_URI=postgresql://mlflow:${MLFLOW_DB_PASSWORD:-mlflow123}@mlflow-db:5432/mlflow
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=s3://mlflow
    depends_on:
      - mlflow-db
      - minio
      - minio-init
    networks:
      - analytics-network
    command: >
      mlflow server
      --backend-store-uri postgresql://mlflow:${MLFLOW_DB_PASSWORD:-mlflow123}@mlflow-db:5432/mlflow
      --default-artifact-root s3://mlflow
      --host 0.0.0.0
      --port 5000

  # =================
  # Redis (for Superset caching)
  # =================
  redis:
    image: redis:7-alpine
    container_name: analytics-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - analytics-network

  # =================
  # Apache Hive Metastore (for Trino)
  # =================
  hive-metastore:
    image: apache/hive:3.1.3
    container_name: hive-metastore
    ports:
      - "9083:9083"
    environment:
      SERVICE_NAME: metastore
      DB_DRIVER: postgres
      SERVICE_OPTS: >
        -Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver
        -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://postgres:5432/hive_metastore
        -Djavax.jdo.option.ConnectionUserName=analytics
        -Djavax.jdo.option.ConnectionPassword=${POSTGRES_PASSWORD:-analytics123}
        -Dfs.s3a.endpoint=http://minio:9000
        -Dfs.s3a.access.key=${MINIO_ROOT_USER:-minioadmin}
        -Dfs.s3a.secret.key=${MINIO_ROOT_PASSWORD:-minioadmin}
        -Dfs.s3a.path.style.access=true
    depends_on:
      - postgres
      - minio
    networks:
      - analytics-network

  # =================
  # Superset (Optional - Analytics Dashboard)
  # =================
  superset:
    image: apache/superset:3.0.1
    container_name: analytics-superset
    ports:
      - "8088:8088"
    environment:
      - SUPERSET_CONFIG_PATH=/app/pythonpath/superset_config.py
      - PYTHONPATH=/app/pythonpath
    volumes:
      - ./config/superset:/app/pythonpath
      - superset-data:/app/superset_home
    depends_on:
      - postgres
    networks:
      - analytics-network

networks:
  analytics-network:
    driver: bridge

volumes:
  zookeeper-data:
  zookeeper-logs:
  postgres-data:
  druid-data:
  druid-segments:
  ignite-data-1:
  ignite-data-2:
  minio-data:
  mlflow-db-data:
  superset-data:
  redis-data: 